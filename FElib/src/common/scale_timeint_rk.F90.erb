!-------------------------------------------------------------------------------
! Warning: This file was generated from <%=__FILE__%>.
!          Do not edit this file.
!-------------------------------------------------------------------------------
!-------------------------------------------------------------------------------
!> module common / Runge-Kutta scheme 
!!
!! @par Description
!!      Driver module to provide various Runge-Kutta schemes. 
!!
!! @author Team SCALE
!<
#include "scaleFElib.h"
module scale_timeint_rk
  !-----------------------------------------------------------------------------
  !
  !++ Used modules
  !
  use scale_precision
  use scale_io
  use scale_prc
  use scale_prof

  !-----------------------------------------------------------------------------
  implicit none
  private

  !-----------------------------------------------------------------------------
  !
  !++ Public type, procedures
  !
  type, public :: timeint_rk
    real(RP), private :: dt

    integer, private :: rk_scheme_id_ex
    integer, private :: rk_scheme_id_im

    integer, public :: var_num
    integer, private, allocatable :: size_each_var(:)
    integer, public :: nstage
    integer, public :: tend_buf_size

    real(RP), public, allocatable :: coef_a_ex(:,:)
    real(RP), private, allocatable :: coef_b_ex(:)
    real(RP), private, allocatable :: coef_c_ex(:)

    real(RP), public, allocatable :: coef_a_im(:,:)
    real(RP), private, allocatable :: coef_b_im(:)
    real(RP), private, allocatable :: coef_c_im(:)

    integer, allocatable :: tend_buf_indmap(:)
% for d in 1..3
    real(RP), public, allocatable :: tend_buf<%=d%>D_ex(<%=(":,"*(d+2)).chop%>)
    real(RP), public, allocatable :: tend_buf<%=d%>D_im(<%=(":,"*(d+2)).chop%>)
    real(RP), private, allocatable :: var0_<%=d%>D(<%=(":,"*(d+1)).chop%>)
    real(RP), private, allocatable :: varTmp_<%=d%>D(<%=(":,"*(d+1)).chop%>)    
% end

    logical, private :: low_storage_flag
    logical, public :: imex_flag
    integer, public :: ndim
  contains
    procedure, public :: Init => timeint_rk_Init
    procedure, public :: Final => timeint_rk_Final
    procedure, public :: Get_implicit_diagfac => timeint_rk_Get_implicit_diagfac 
    procedure, public :: Get_deltime => timeint_rk_Get_deltime
% for d in 1..3    
    procedure, public :: Advance<%=d%>D => timeint_rk_advance<%=d%>D
    procedure, public :: StoreImplicit<%=d%>D => timeint_rk_storeimpl<%=d%>D
% end
    generic, public :: Advance => Advance1D, Advance2D, Advance3D
    generic, public :: StoreImplicit => StoreImplicit1D, StoreImplicit2D, StoreImplicit3D
  end type timeint_rk

  !-----------------------------------------------------------------------------
  !
  !++ Public parameters & variables
  !
  !-----------------------------------------------------------------------------
  !
  !++ Private procedures
  !
  !-------------------

  integer, parameter :: RK_SCHEME_TVD_3 = 1

contains

!----------------

  subroutine timeint_rk_Init( this,                  &
    rk_scheme_name, dt, var_num, ndim, size_each_var )

    use scale_timeint_rk_butcher_tab, only: &
      timeint_rk_butcher_tab_get_info,      &
      timeint_rk_butcher_tab_get      
    implicit none
    class(timeint_rk), intent(inout) :: this
    character(*), intent(in) :: rk_scheme_name
    real(RP), intent(in) :: dt
    integer, intent(in) :: var_num
    integer, intent(in) :: ndim
    integer, intent(in) :: size_each_var(ndim)
    !----------------------------------------

    this%dt = dt
    this%ndim = ndim
    this%var_num  = 1
    allocate( this%size_each_var(ndim) )
    this%size_each_var(:) = size_each_var(:)

    call timeint_rk_butcher_tab_get_info( rk_scheme_name, & ! (in)
      this%nstage, this%tend_buf_size,                    & ! (out)
      this%low_storage_flag, this%imex_flag               ) ! (out)
    
    allocate ( this%coef_a_ex(this%nstage,this%nstage), this%coef_b_ex(this%nstage), this%coef_c_ex(this%nstage) )
    if (this%imex_flag) then
      allocate ( this%coef_a_im(this%nstage,this%nstage), this%coef_b_im(this%nstage), this%coef_c_im(this%nstage) )
    end if

    select case(this%ndim)
% for d in 1..3
    case(<%=d%>)
% str = ""
% for i in 1..d
%   str << "size_each_var(#{i}),"
% end
% str.chop!
      allocate( this%tend_buf<%=d%>D_ex(<%=str%>, var_num, this%tend_buf_size) )
      if (this%imex_flag) then
        allocate( this%tend_buf<%=d%>D_im(<%=str%>, var_num, this%tend_buf_size) )
      end if
      allocate( this%var0_<%=d%>D(<%=str%>, var_num) )
      if (.not. this%low_storage_flag) allocate( this%varTmp_<%=d%>D(<%=str%>, var_num) )        
% end
    end select
    allocate( this%tend_buf_indmap(this%nstage) )

    call timeint_rk_butcher_tab_get( &
      rk_scheme_name, this%nstage, this%imex_flag,    & ! (in)
      this%coef_a_ex, this%coef_b_ex, this%coef_c_ex, & ! (out)
      this%coef_a_im, this%coef_b_im, this%coef_c_im, & ! (out)
      this%tend_buf_indmap                            ) ! (out)

    return
  end subroutine timeint_rk_Init

  subroutine timeint_rk_Final( this )

    class(timeint_rk), intent(inout) :: this
    !----------------------------------------
    
    deallocate( this%coef_a_ex, this%coef_b_ex, this%coef_c_ex )
    if (this%imex_flag) then
      deallocate( this%coef_a_im, this%coef_b_im, this%coef_c_im )
    end if

    select case(this%ndim)
% for d in 1..3      
    case(<%=d%>)
      deallocate( this%var0_<%=d%>d )
      deallocate( this%tend_buf<%=d%>D_ex )
      if (this%imex_flag) deallocate( this%tend_buf<%=d%>D_im )
      if (.not. this%low_storage_flag) deallocate( this%varTmp_<%=d%>d )
%end
    end select
    
    return
  end subroutine timeint_rk_Final

  elemental function timeint_rk_Get_DelTime( this ) result(dt)
    implicit none
    class(timeint_rk), intent(in) :: this
    real(RP) :: dt
    !-----------------------------------------------------
    
    dt = this%dt

    return
  end function timeint_rk_Get_DelTime

  elemental function timeint_rk_Get_implicit_diagfac( this, nowstage ) result(fac)
    implicit none
    class(timeint_rk), intent(in) :: this
    integer, intent(in) :: nowstage
    real(RP) :: fac
    !-----------------------------------------------------
    
    fac = this%coef_a_im(nowstage,nowstage) * this%dt

    return
  end function timeint_rk_Get_implicit_diagfac
  !----------------

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_arg = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
% end
% ind_arg.chop!
  subroutine timeint_rk_advance<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>)
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    !----------------------------------------    
 
    if (this%low_storage_flag) then
      call rk_advance_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>)
    else
      call rk_advance_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%> )
    end if

    return
  end subroutine timeint_rk_advance<%=d%>D

  subroutine timeint_rk_storeimpl<%=d%>D( this, nowstage, q, varID, <%=ind_arg%>)
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    !----------------------------------------    
 
    call rk_storeimpl_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%> )

    return
  end subroutine timeint_rk_storeimpl<%=d%>D
% end

!-------------------

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_name = ["i", "j", "k"]
% ind_arg = ""
% ind_ary = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
%   ind_ary << ind_name[i-1] << ","
% end
% ind_arg.chop!
% ind_ary.chop!

  subroutine rk_advance_low_storage<%=d%>D( this, nowstage, q, varID, <%=ind_arg%> )
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    integer :: <%=ind_ary%>
    real(RP) :: a_ss

    !----------------------------------------    

    call PROF_rapstart( 'rk_advance_low_storage<%=d%>D', 3) 

    a_ss = this%coef_a_ex(nowstage,nowstage)

    !$omp parallel
    if (nowstage == 1) then
      !$omp do 
%if (d > 2) then
      !%omp collapse(<%=(d-1)%>)
%end
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
        this%var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end
    end if

    !$omp do 
%if (d > 2) then
    !%omp collapse(<%=(d-1)%>)
%end      
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
%end
      q(<%=ind_ary%>) = (1.0_RP - a_ss)*this%var0_<%=d%>d(<%=ind_ary%>,varID)                   &
              + a_ss*(q(<%=ind_ary%>) + this%dt * this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1) )
% for i in 1..d
    end do
% end

    !$omp end parallel

    call PROF_rapend( 'rk_advance_low_storage<%=d%>D', 3)

    return
  end subroutine rk_advance_low_storage<%=d%>D
% end

% for d in 1..3

% ind_range_list = ["is, ie", "js, je", "ks, ke"]
% ind_name = ["i", "j", "k"]
% ind_arg = ""
% ind_ary = ""
% for i in 1..d
%   ind_arg << ind_range_list[i-1] << " ,"
%   ind_ary << ind_name[i-1] << ","
% end
% ind_arg.chop!
% ind_ary.chop!
  subroutine rk_advance_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%> )
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    integer :: <%=ind_ary%>
    integer :: s
    integer :: tintbuf_ind
    !----------------------------------------    

    tintbuf_ind = this%tend_buf_indmap(nowstage)

    if ( nowstage == 1 .and. (.not. this%imex_flag) ) then
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
        this%var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
        this%varTmp_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end
    end if 

    if ( nowstage ==  this%nstage ) then
      if ( this%imex_flag ) then
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end    
          q(<%=ind_ary%>) =  this%varTmp_<%=d%>d(<%=ind_ary%>,varID) + this%dt * ( &
              + this%coef_b_ex(nowstage) * this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)   & 
              + this%coef_b_im(nowstage) * this%tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)   )
% for i in 1..d
        end do
% end
      else
% for i in 1..d
        do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
          q(<%=ind_ary%>) =  this%varTmp_<%=d%>d(<%=ind_ary%>,varID)                                             &
                  + this%dt * this%coef_b_ex(nowstage) * this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
        end do
% end      
      end if       
      return
    end if

    if ( this%imex_flag ) then
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end    
        q(<%=ind_ary%>) = this%var0_<%=d%>d(<%=ind_ary%>,varID)
        this%varTmp_<%=d%>d(<%=ind_ary%>,varID) =  this%varTmp_<%=d%>d(<%=ind_ary%>,varID) + this%dt * ( &
              + this%coef_b_ex(nowstage) * this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)   & 
              + this%coef_b_im(nowstage) * this%tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)   )
% for i in 1..d
      end do
% end
    else
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = this%var0_<%=d%>d(<%=ind_ary%>,varID)
        this%varTmp_<%=d%>d(<%=ind_ary%>,varID) =  this%varTmp_<%=d%>d(<%=ind_ary%>,varID)                                             &
                  + this%dt * this%coef_b_ex(nowstage) * this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,tintbuf_ind)
% for i in 1..d
      end do
% end      
    end if 

    if ( this%tend_buf_size == 1 .and. (.not. this%imex_flag) ) then
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = this%var0_<%=d%>d(<%=ind_ary%>,varID)                                                &
            +  this%dt * this%coef_a_ex(nowstage+1,nowstage)*this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,1)
% for i in 1..d
      end do
% end
    else if ( .not. this%imex_flag ) then      
      do s=1, nowstage
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = q(<%=ind_ary%>)                                  &
            +  this%dt * this%coef_a_ex(nowstage+1,s)*this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,s)
% for i in 1..d
      end do
% end    
      end do
    else ! IMEX   
      do s=1, nowstage
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end 
        q(<%=ind_ary%>) = q(<%=ind_ary%>)                                        &
            +  this%dt * ( this%coef_a_ex(nowstage+1,s)*this%tend_buf<%=d%>D_ex(<%=ind_ary%>,varID,s)  &
                         + this%coef_a_im(nowstage+1,s)*this%tend_buf<%=d%>D_im(<%=ind_ary%>,varID,s)  )                         
% for i in 1..d
      end do
% end    
      end do
    end if

    return
  end subroutine rk_advance_general<%=d%>D

  subroutine rk_storeimpl_general<%=d%>D( this, nowstage, q, varID, <%=ind_arg%> )
    class(timeint_rk), intent(inout) :: this
    integer, intent(in) :: nowstage
    real(RP), intent(inout) :: q(<%=(":,"*d).chop%>)
    integer, intent(in) :: varID
    integer, intent(in) :: <%=ind_arg%>

    integer :: <%=ind_ary%>
    integer :: s
    integer :: tintbuf_ind
    !----------------------------------------    

    if (.not. this%imex_flag ) return
    
    if ( nowstage == 1 ) then
% for i in 1..d
      do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
        this%var0_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
        this%varTmp_<%=d%>D(<%=ind_ary%>,varID) = q(<%=ind_ary%>)
% for i in 1..d
      end do
% end
    end if
            
    tintbuf_ind = this%tend_buf_indmap(nowstage)    
% for i in 1..d
    do <%=ind_name[d-i]%>=<%=ind_range_list[d-i]%>
% end      
      q(<%=ind_ary%>) = q(<%=ind_ary%>)                                                                              &
            +  this%dt * this%coef_a_im(nowstage,nowstage)*this%tend_buf<%=d%>D_im(<%=ind_ary%>,varID,tintbuf_ind)  
% for i in 1..d
    end do
% end

    return
  end subroutine rk_storeimpl_general<%=d%>D
 
% end
end module scale_timeint_rk

